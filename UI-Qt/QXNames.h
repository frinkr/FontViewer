#pragma once
#include <map>
#include <vector>
#include "FontX/FXTag.h"
#include "FontX/FXHelper.h"

class QXNames {
public:
    
    static std::vector<std::string> HeadGetFlagDescription(uint16_t flag) {
        static const std::map<size_t, const char *> map = {
            {0, "Baseline at Y = 0"},
            {1, "Left sidebearing at X = 0"},
            {2, "Instructions depends on point size"},
            {3, "Force ppem to integer values"},
            {4, "Instructions may alter advance width"},
            {11, "Font data is ‘lossless’ compressed"},
            {12, "Font converted"},
            {13, "Font optimized for ClearType™"},
            {14, "Last Resort font"},
        };
        std::vector<std::string> descs;
        for (auto kv: map)
            descs.push_back(std::string(kv.second) + ": " + ((flag & (1 << kv.first))? "YES": "NO"));
        return descs;
    }
    
    static std::vector<std::string> HeadGetMacStyleDescription(uint16_t flag) {
        static const char * names[] = {"Bold", "Italic", "Underline", "Outline", "Shadow", "Condensed", "Extended"};
        std::vector<std::string> descs;
        for (size_t i = 0; i < sizeof(names)/sizeof(names[0]); ++ i) {
            if (flag & (1 << i))
                descs.push_back(names[i]);
        }
        return descs;
    }
    
    static const char * OS2GetWeightClassName(uint16_t value) {
        switch (value) {
        case 100: return "Thin";
        case 200: return "Extra-light (Ultra-light)";
        case 300: return "Light";
        case 400: return "Normal (Regular)";
        case 500: return "Medium";
        case 600: return "Semi-bold (Demi-bold)";
        case 700: return "Bold";
        case 800: return "Extra-bold (Ultra-bold)";
        case 900: return "Black (Heavy)";
        default: return "Unknown";
        }
    }
        
    static const char * OS2GetWidthClassName(uint16_t value) {
        switch (value) {
        case 1: return "Ultra-condensed";
        case 2: return "Extra-condensed";
        case 3: return "Condensed";
        case 4: return "Semi-condensed";
        case 5: return "Medium (normal)";
        case 6: return "Semi-expanded";
        case 7: return "Expanded";
        case 8: return "Extra-expanded";
        case 9: return "Ultra-expanded";
        default: return "Unknown";
        }
    }
        
    static std::vector<std::string> OS2GetFsTypeDescription(uint16_t value) {
        if (!value)
            return {"Installable Embedding"};
            
        std::vector<std::string> names;
            
        if (value & (1 << 1)) names.push_back("Restricted License Embedding");
        if (value & (1 << 2)) names.push_back("Preview & Print Embedding");
        if (value & (1 << 3)) names.push_back("Editable Embedding");
        if (value & (1 << 8)) names.push_back("No Subsetting");
        if (value & (1 << 9)) names.push_back("Bitmap Embedding Only");
            
        return names;
    }
        
    static const char * OS2GetFamilyClassName(uint16_t value) {
        unsigned short family = ((value & 0xFF00) >> 8);
            
        const char * names [] = {"No classification",
                                 "OldStyle Serifs",
                                 "Transitional Serifs",
                                 "Modern Serifs",
                                 "Clarendon Serifs",
                                 "Slab Serifs",
                                 "Reserved",
                                 "Freeform Serifs",
                                 "Sans Serif",
                                 "Ornamentals",
                                 "Scripts",
                                 "reserved",
                                 "Symbolic",
                                 "reserved",
                                 "reserved",
        };
            
        if (family < sizeof(names)/sizeof(names[0]))
            return names[family];
        return "Unknown Family Class";
    }
        
    static const char * OS2GetSubFamilyClassName(uint16_t value) {
        uint16_t family = ((value & 0xFF00) >> 8);
        uint16_t subFamily = (value & 0xFF);
            
        std::vector<const char *> subFamilyNames;
        switch (family) {
        case 1: subFamilyNames = {"No classification",
                                  "IBM Rounded Legibility",
                                  "Garalde",
                                  "Venetian",
                                  "Modified Venetian",
                                  "Dutch Modern",
                                  "Dutch Traditional",
                                  "Contemporary",
                                  "Calligraphic",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "Miscellaneous"};
            break;
        case 2: subFamilyNames = {"No Classification",
                                  "Direct Line",
                                  "Script",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "Miscellaneous"};
            break;
        case 3: subFamilyNames = {"No Classification",
                                  "Italian",
                                  "Script",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "Miscellaneous"};
            break;
        case 4: subFamilyNames = {"No Classification",
                                  "Clarendon",
                                  "Modern",
                                  "Traditional",
                                  "Newspaper",
                                  "Stub Serif",
                                  "Monotone",
                                  "Typewriter",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "Miscellaneous"};
            break;
        case 5: subFamilyNames = {"No classification",
                                  "Monotone",
                                  "Humanist",
                                  "Geometric",
                                  "Swiss",
                                  "Typewriter",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "Miscellaneous"};
            break;
        case 7: subFamilyNames = {"No classification",
                                  "Modern",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "reserved",
                                  "Miscellaneous"};
            break;
        case 8: subFamilyNames = {"No classification",
                                  "IBM Neo-grotesque Gothic",
                                  "Humanist",
                                  "Low-x Round Geometric",
                                  "High-x Round Geometric",
                                  "Neo-grotesque Gothic",
                                  "Modified neo-grotesque Gothic",
                                  "Reserved",
                                  "Reserved",
                                  "Typewriter Gothic",
                                  "Matrix",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Miscellaneous"};
            break;
        case 9: subFamilyNames = {"No classification",
                                  "Engraver",
                                  "Black Letter",
                                  "Decorative",
                                  "Three Dimensional",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Reserved",
                                  "Miscellaneous"};
            break;
        case 10: subFamilyNames = {"No classification",
                                   "Uncial",
                                   "Brush Joined",
                                   "Formal Joined",
                                   "Monotone Joined",
                                   "Calligraphic",
                                   "Brush Unjoined",
                                   "Formal Unjoined",
                                   "Monotone Unjoined",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Miscellaneous"};
            break;
        case 12: subFamilyNames = {"No classification",
                                   "Reserved",
                                   "Reserved",
                                   "Mixed Serif",
                                   "Reserved",
                                   "Reserved",
                                   "Oldstyle Serif",
                                   "Neo-grotesque Sans Serif",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Reserved",
                                   "Miscellaneous"};
            break;
                    
        default:
            break;
        }
            
        if (subFamily < subFamilyNames.size())
            return subFamilyNames[subFamily];
            
        return "Unknown SubFamily Class";
    }

    static std::string OS2GetFamilyClassFullName(uint16_t value) {
        return OS2GetFamilyClassName(value) + std::string(OS2GetSubFamilyClassName(value));
    }
        
    static auto OS2GetUnicodeRanges(uint32_t range1, uint32_t range2, uint32_t range3, uint32_t range4) {
        std::vector<std::vector<const char *> > allBlockNames
            = {{"Basic Latin"},
               {"Latin-1 Supplement"},
               {"Latin Extended-A"},
               {"Latin Extended-B"},
               {"IPA Extensions", "Phonetic Extensions", "Phonetic Extensions Supplement"},
               {"Spacing Modifier Letters", "Modifier Tone Letters"},
               {"Combining Diacritical Marks", "Combining Diacritical Marks Supplement"},
               {"Greek and Coptic"},
               {"Coptic"},
               {"Cyrillic", "Cyrillic Supplement", "Cyrillic Extended-A", "Cyrillic Extended-B"},
               {"Armenian"},
               {"Hebrew"},
               {"Vai"},
               {"Arabic", "Arabic Supplement"},
               {"NKo"},
               {"Devanagari"},
               {"Bengali"},
               {"Gurmukhi"},
               {"Gujarati"},
               {"Oriya"},
               {"Tamil"},
               {"Telugu"},
               {"Kannada"},
               {"Malayalam"},
               {"Thai"},
               {"Lao"},
               {"Georgian", "Georgian Supplement"},
               {"Balinese"},
               {"Hangul Jamo"},
               {"Latin Extended Additional", "Latin Extended-C", "Latin Extended-D"},
               {"Greek Extended"},
               {"General Punctuation", "Supplemental Punctuation"},
               {"Superscripts And Subscripts"},
               {"Currency Symbols"},
               {"Combining Diacritical Marks For Symbols"},
               {"Letterlike Symbols"},
               {"Number Forms"},
               {"Arrows", "Supplemental Arrows-A", "Supplemental Arrows-B", "Miscellaneous Symbols and Arrows"},
               {"Mathematical Operators", "Supplemental Mathematical Operators", "Miscellaneous Mathematical Symbols-A", "Miscellaneous Mathematical Symbols-B"},
               {"Miscellaneous Technical"},
               {"Control Pictures"},
               {"Optical Character Recognition"},
               {"Enclosed Alphanumerics"},
               {"Box Drawing"},
               {"Block Elements"},
               {"Geometric Shapes"},
               {"Miscellaneous Symbols"},
               {"Dingbats"},
               {"CJK Symbols And Punctuation"},
               {"Hiragana"},
               {"Katakana", "Katakana Phonetic Extensions"},
               {"Bopomofo", "Bopomofo Extended"},
               {"Hangul Compatibility Jamo"},
               {"Phags-pa"},
               {"Enclosed CJK Letters And Months"},
               {"CJK Compatibility"},
               {"Hangul Syllables"},
               {"High Surrogates", "High Private Use Surrogates", "Low Surrogates"},
               {"Phoenician"},
               {"CJK Unified Ideographs", "CJK Radicals Supplement", "Kangxi Radicals", "Ideographic Description Characters", "CJK Unified Ideographs Extension A", "CJK Unified Ideographs Extension B", "Kanbun"},
               {"Private Use Area"},
               {"CJK Strokes", "CJK Compatibility Ideographs", "CJK Compatibility Ideographs Supplement"},
               {"Alphabetic Presentation Forms"},
               {"Arabic Presentation Forms-A"},
               {"Combining Half Marks"},
               {"Vertical Forms", "CJK Compatibility Forms"},
               {"Small Form Variants"},
               {"Arabic Presentation Forms-B"},
               {"Halfwidth And Fullwidth Forms"},
               {"Specials"},
               {"Tibetan"},
               {"Syriac"},
               {"Thaana"},
               {"Sinhala"},
               {"Myanmar"},
               {"Ethiopic", "Ethiopic Supplement", "Ethiopic Extended"},
               {"Cherokee"},
               {"Unified Canadian Aboriginal Syllabics"},
               {"Ogham"},
               {"Runic"},
               {"Khmer", "Khmer Symbols"},
               {"Mongolian"},
               {"Braille Patterns"},
               {"Yi Syllables", "Yi Radicals"},
               {"Tagalog", "Hanunoo", "Buhid", "Tagbanwa"},
               {"Old Italic"},
               {"Gothic"},
               {"Deseret"},
               {"Byzantine Musical Symbols", "Musical Symbols", "Ancient Greek Musical Notation"},
               {"Mathematical Alphanumeric Symbols"},
               {"Supplementary Private Use Area-A", "Supplementary Private Use Area-B"},
               {"Variation Selectors", "Variation Selectors Supplement"},
               {"Tags"},
               {"Limbu"},
               {"Tai Le"},
               {"New Tai Lue"},
               {"Buginese"},
               {"Glagolitic"},
               {"Tifinagh"},
               {"Yijing Hexagram Symbols"},
               {"Syloti Nagri"},
               {"Linear B Syllabary", "Linear B Ideograms", "Aegean Numbers"},
               {"Ancient Greek Numbers"},
               {"Ugaritic"},
               {"Old Persian"},
               {"Shavian"},
               {"Osmanya"},
               {"Cypriot Syllabary"},
               {"Kharoshthi"},
               {"Tai Xuan Jing Symbols"},
               {"Cuneiform", "Cuneiform Numbers and Punctuation"},
               {"Counting Rod Numerals"},
               {"Sundanese"},
               {"Lepcha"},
               {"Ol Chiki"},
               {"Saurashtra"},
               {"Kayah Li"},
               {"Rejang"},
               {"Cham"},
               {"Ancient Symbols"},
               {"Phaistos Disc"},
               {"Carian", "Lycian", "Lydian"},
               {"Domino Tiles", "Mahjong Tiles"},
        };
            
        std::vector<std::string> blockNames;
        uint32_t range[] = {range1, range2, range3, range4};
        for (size_t i = 0; i < allBlockNames.size(); ++ i) {
            unsigned char k = i % 32;
            unsigned char f = i / 32;
            if (range[f] & (1 << k)) {
                auto & names = allBlockNames[i];
                blockNames.insert(blockNames.end(), names.begin(), names.end());
            }
        }
        return blockNames;
    }
        
    static auto OS2GetFsSelectionDescription(uint16_t value) {
        std::vector<std::string> names;
            
        if (value & (1 << 0)) names.push_back("Italic");
        if (value & (1 << 1)) names.push_back("Underscore");
        if (value & (1 << 2)) names.push_back("Negative");
        if (value & (1 << 3)) names.push_back("Outlined");
        if (value & (1 << 4)) names.push_back("Strikeout");
        if (value & (1 << 5)) names.push_back("Bold");
        if (value & (1 << 6)) names.push_back("Regular");
        if (value & (1 << 7)) names.push_back("Use Typo Metrics");
        if (value & (1 << 8)) names.push_back("WWS");
        if (value & (1 << 9)) names.push_back("Oblique");
            
            
        return names;
    }
        
    static auto OS2GetCodePageRanges(uint32_t range1, uint32_t range2) {
        std::vector<std::pair<const char *, const char *>> allCodePages
            = {
            {"1252" , "Latin 1"},
            {"1250" , "Latin 2: Eastern Europe"},
            {"1251" , "Cyrillic"},
            {"1253" , "Greek"},
            {"1254" , "Turkish"},
            {"1255" , "Hebrew"},
            {"1256" , "Arabic"},
            {"1257" , "Windows Baltic"},
            {"1258" , "Vietnamese"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"udef" , "Reserved for Alternate ANSI"},
            {"874"  , "Thai"},
            {"932"  , "JIS/Japan"},
            {"936"  , "Chinese: Simplified chars--PRC and Singapore"},
            {"949"  , "Korean Wansung"},
            {"950"  , "Chinese: Traditional chars--Taiwan and Hong Kong"},
            {"1361" , "Korean Johab"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Reserved for Alternate ANSI & OEM"},
            {"udef" , "Macintosh Character Set (US Roman)"},
            {"udef" , "OEM Character Set"},
            {"udef" , "Symbol Character Set"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"udef" , "Reserved for OEM"},
            {"869"  , "IBM Greek"},
            {"866"  , "MS-DOS Russian"},
            {"865"  , "MS-DOS Nordic"},
            {"864"  , "Arabic"},
            {"863"  , "MS-DOS Canadian French"},
            {"862"  , "Hebrew"},
            {"861"  , "MS-DOS Icelandic"},
            {"860"  , "MS-DOS Portuguese"},
            {"857"  , "IBM Turkish"},
            {"855"  , "IBM Cyrillic; primarily Russian"},
            {"852"  , "Latin 2"},
            {"775"  , "MS-DOS Baltic"},
            {"737"  , "Greek; former 437 G"},
            {"708"  , "Arabic; ASMO 708"},
            {"850"  , "WE/Latin 1"},
            {"437"  , "US"},
        };
                
        std::vector<std::string> codePages;
                
        uint32_t range[] = {range1, range2};
        for (size_t i = 0; i < allCodePages.size(); ++ i) {
            unsigned char k = i % 32;
            unsigned char f = i / 32;
            if (range[f] & (1 << k)) {
                auto code = allCodePages[i].first;
                auto name = allCodePages[i].second;
                if (atoi(code))
                    codePages.push_back(code + std::string(" ") + name);
                else
                    codePages.push_back(name);
            }
        }
        return codePages;
    }
        
    template <typename T>
    static const char * OS2PanoseSearchInArray(uint8_t value, const std::initializer_list<T> & array) {
            
        auto itr = std::begin(array);
        if (std::distance(itr, std::end(array)) <= value)
            return "";
        std::advance(itr, value);
        return *itr;
    }
        
    static const char * OS2GetPanoseFamilyType(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Text and Display",
                "Script",
                "Decorative",
                "Pictorial",
                
            });
    }
        
    static const char * OS2GetPanoseSerifType(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Cove",
                "Obtuse Cove",
                "Square Cove",
                "Obtuse Square Cove",
                "Square",
                "Thin",
                "Bone",
                "Exaggerated",
                "Triangle",
                "Normal Sans",
                "Obtuse Sans",
                "Perp Sans",
                "Flared",
                "Rounded",
            });
    }
        
    static const char * OS2GetPanoseWeight(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Very Light",
                "Light",
                "Thin",
                "Book",
                "Medium",
                "Demi",
                "Bold",
                "Heavy",
                "Black",
                "Nord",
                
            });
    }
        
    static const char * OS2GetPanoseProportion(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Old Style",
                "Modern",
                "Even Width",
                "Expanded",
                "Condensed",
                "Very Expanded",
                "Very Condensed",
                "Monospaced",
                
            });
    }
    static const char * OS2GetPanoseContrast(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "None",
                "Very Low",
                "Low",
                "Medium Low",
                "Medium",
                "Medium High",
                "High",
                "Very High",
                
            });
    }
    static const char * OS2GetPanoseStrokeVariation(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Gradual/Diagonal",
                "Gradual/Transitional",
                "Gradual/Vertical",
                "Gradual/Horizontal",
                "Rapid/Vertical",
                "Rapid/Horizontal",
                "Instant/Vertical",
                
            });
    }
    static const char * OS2GetPanoseArmStyle(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Straight Arms/Horizontal",
                "Straight Arms/Wedge",
                "Straight Arms/Vertical",
                "Straight Arms/Single Serif",
                "Straight Arms/Double Serif",
                "Non-Straight Arms/Horizontal",
                "Non-Straight Arms/Wedge",
                "Non-Straight Arms/Vertical",
                "Non-Straight Arms/Single Serif",
                "Non-Straight Arms/Double Serif",
                
            });
    }
    static const char * OS2GetPanoseLetterform(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Normal/Contact",
                "Normal/Weighted",
                "Normal/Boxed",
                "Normal/Flattened",
                "Normal/Rounded",
                "Normal/Off Center",
                "Normal/Square",
                "Oblique/Contact",
                "Oblique/Weighted",
                "Oblique/Boxed",
                "Oblique/Flattened",
                "Oblique/Rounded",
                "Oblique/Off Center",
                "Oblique/Square",
                
            });
    }
    static const char * OS2GetPanoseMidline(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Standard/Trimmed",
                "Standard/Pointed",
                "Standard/Serifed",
                "High/Trimmed",
                "High/Pointed",
                "High/Serifed",
                "Constant/Trimmed",
                "Constant/Pointed",
                "Constant/Serifed",
                "Low/Trimmed",
                "Low/Pointed",
                "Low/Serifed",
                
            });
    }
    static const char * OS2GetPanoseXHeight(uint8_t value) {
        return OS2PanoseSearchInArray(value, {
                "Any",
                "No Fit",
                "Constant/Small",
                "Constant/Standard",
                "Constant/Large",
                "Ducking/Small",
                "Ducking/Standard",
                "Ducking/Large",
                
            });
    }

    static const char * PostGetMacintoshGlyphName(size_t index) {
        const char * names [] =
            {
                ".notdef",
                ".null",
                "nonmarkingreturn",
                "space",
                "exclam",
                "quotedbl",
                "numbersign",
                "dollar",
                "percent",
                "ampersand",
                "quotesingle",
                "parenleft",
                "parenright",
                "asterisk",
                "plus",
                "comma",
                "hyphen",
                "period",
                "slash",
                "zero",
                "one",
                "two",
                "three",
                "four",
                "five",
                "six",
                "seven",
                "eight",
                "nine",
                "colon",
                "semicolon",
                "less",
                "equal",
                "greater",
                "question",
                "at",
                "A",
                "B",
                "C",
                "D",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "N",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                "bracketleft",
                "backslash",
                "bracketright",
                "asciicircum",
                "underscore",
                "grave",
                "a",
                "b",
                "c",
                "d",
                "e",
                "f",
                "g",
                "h",
                "i",
                "j",
                "k",
                "l",
                "m",
                "n",
                "o",
                "p",
                "q",
                "r",
                "s",
                "t",
                "u",
                "v",
                "w",
                "x",
                "y",
                "z",
                "braceleft",
                "bar",
                "braceright",
                "asciitilde",
                "Adieresis",
                "Aring",
                "Ccedilla",
                "Eacute",
                "Ntilde",
                "Odieresis",
                "Udieresis",
                "aacute",
                "agrave",
                "acircumflex",
                "adieresis",
                "atilde",
                "aring",
                "ccedilla",
                "eacute",
                "egrave",
                "ecircumflex",
                "edieresis",
                "iacute",
                "igrave",
                "icircumflex",
                "idieresis",
                "ntilde",
                "oacute",
                "ograve",
                "ocircumflex",
                "odieresis",
                "otilde",
                "uacute",
                "ugrave",
                "ucircumflex",
                "udieresis",
                "dagger",
                "degree",
                "cent",
                "sterling",
                "section",
                "bullet",
                "paragraph",
                "germandbls",
                "registered",
                "copyright",
                "trademark",
                "acute",
                "dieresis",
                "notequal",
                "AE",
                "Oslash",
                "infinity",
                "plusminus",
                "lessequal",
                "greaterequal",
                "yen",
                "mu",
                "partialdiff",
                "summation",
                "product",
                "pi",
                "integral",
                "ordfeminine",
                "ordmasculine",
                "Omega",
                "ae",
                "oslash",
                "questiondown",
                "exclamdown",
                "logicalnot",
                "radical",
                "florin",
                "approxequal",
                "Delta",
                "guillemotleft",
                "guillemotright",
                "ellipsis",
                "nonbreakingspace",
                "Agrave",
                "Atilde",
                "Otilde",
                "OE",
                "oe",
                "endash",
                "emdash",
                "quotedblleft",
                "quotedblright",
                "quoteleft",
                "quoteright",
                "divide",
                "lozenge",
                "ydieresis",
                "Ydieresis",
                "fraction",
                "currency",
                "guilsinglleft",
                "guilsinglright",
                "fi",
                "fl",
                "daggerdbl",
                "periodcentered",
                "quotesinglbase",
                "quotedblbase",
                "perthousand",
                "Acircumflex",
                "Ecircumflex",
                "Aacute",
                "Edieresis",
                "Egrave",
                "Iacute",
                "Icircumflex",
                "Idieresis",
                "Igrave",
                "Oacute",
                "Ocircumflex",
                "apple",
                "Ograve",
                "Uacute",
                "Ucircumflex",
                "Ugrave",
                "dotlessi",
                "circumflex",
                "tilde",
                "macron",
                "breve",
                "dotaccent",
                "ring",
                "cedilla",
                "hungarumlaut",
                "ogonek",
                "caron",
                "Lslash",
                "lslash",
                "Scaron",
                "scaron",
                "Zcaron",
                "zcaron",
                "brokenbar",
                "Eth",
                "eth",
                "Yacute",
                "yacute",
                "Thorn",
                "thorn",
                "minus",
                "multiply",
                "onesuperior",
                "twosuperior",
                "threesuperior",
                "onehalf",
                "onequarter",
                "threequarters",
                "franc",
                "Gbreve",
                "gbreve",
                "Idotaccent",
                "Scedilla",
                "scedilla",
                "Cacute",
                "cacute",
                "Ccaron",
                "ccaron",
                "dcroat",
            };
        return names[index];
    }

    std::string static GetTagDescription(FXTag tag, const std::map<std::string, std::string> & descriptionMap) {
        auto tagStr = FXTag2Str(tag);
        FXHelper::trim(tagStr);
        
        auto itr = descriptionMap.find(tagStr);
        if (itr != descriptionMap.end())
            return itr->second;
        return tagStr;
    }
    
    static std::string OTGetScriptFullName(FXTag tag) {
        static std::map<std::string, std::string> names = {
            {"arab", "Arabic"},
            {"armn", "Armenian"},
            {"avst", "Avestan"},
            {"bali", "Balinese"},
            {"bamu", "Bamum"},
            {"batk", "Batak"},
            {"beng", "Bengali"},
            {"bng2", "Bengali v.2"},
            {"bopo", "Bopomofo"},
            {"brai", "Braille"},
            {"brah", "Brahmi"},
            {"bugi", "Buginese"},
            {"buhd", "Buhid"},
            {"byzm", "Byzantine Music"},
            {"cans", "Canadian Syllabics"},
            {"cari", "Carian"},
            {"cakm", "Chakma"},
            {"cham", "Cham"},
            {"cher", "Cherokee"},
            {"hani", "CJK Ideographic"},
            {"copt", "Coptic"},
            {"cprt", "Cypriot Syllabary"},
            {"cyrl", "Cyrillic"},
            {"DFLT", "Default"},
            {"dsrt", "Deseret"},
            {"deva", "Devanagari"},
            {"dev2", "Devanagari v.2"},
            {"egyp", "Egyptian heiroglyphs"},
            {"ethi", "Ethiopic"},
            {"geor", "Georgian"},
            {"glag", "Glagolitic"},
            {"goth", "Gothic"},
            {"grek", "Greek"},
            {"gujr", "Gujarati"},
            {"gjr2", "Gujarati v.2"},
            {"guru", "Gurmukhi"},
            {"gur2", "Gurmukhi v.2"},
            {"hang", "Hangul"},
            {"jamo", "Hangul Jamo"},
            {"hano", "Hanunoo"},
            {"hebr", "Hebrew"},
            {"kana", "Hiragana"},
            {"armi", "Imperial Aramaic"},
            {"phli", "Inscriptional Pahlavi"},
            {"prti", "Inscriptional Parthian"},
            {"java", "Javanese"},
            {"kthi", "Kaithi"},
            {"knda", "Kannada"},
            {"knd2", "Kannada v.2"},
            {"kana", "Katakana"},
            {"kali", "Kayah Li"},
            {"khar", "Kharosthi"},
            {"khmr", "Khmer"},
            {"lao", "Lao"},
            {"latn", "Latin"},
            {"lepc", "Lepcha"},
            {"limb", "Limbu"},
            {"linb", "Linear B"},
            {"lisu", "Lisu (Fraser)"},
            {"lyci", "Lycian"},
            {"lydi", "Lydian"},
            {"mlym", "Malayalam"},
            {"mlm2", "Malayalam v.2"},
            {"mand", "Mandaic Mandaean"},
            {"math", "Mathematical Alphanumeric Symbols"},
            {"mtei", "Meitei Mayek (Meithei Meetei)"},
            {"merc", "Meroitic Cursive"},
            {"mero", "Meroitic Hieroglyphs"},
            {"mong", "Mongolian"},
            {"musc", "Musical Symbols"},
            {"mymr", "Myanmar"},
            {"talu", "New Tai Lue"},
            {"nko", "N'Ko"},
            {"ogam", "Ogham"},
            {"olck", "Ol Chiki"},
            {"ital", "Old Italic"},
            {"xpeo", "Old Persian Cuneiform"},
            {"sarb", "Old South Arabian"},
            {"orkh", "Old Turkic Orkhon Runic"},
            {"orya", "Odia (formerly Oriya)"},
            {"ory2", "Odia v.2 (formerly Oriya v.2)"},
            {"osma", "Osmanya"},
            {"phag", "Phags-pa"},
            {"phnx", "Phoenician"},
            {"rjng", "Rejang"},
            {"runr", "Runic"},
            {"samr", "Samaritan"},
            {"saur", "Saurashtra"},
            {"shrd", "Sharada"},
            {"shaw", "Shavian"},
            {"sinh", "Sinhala"},
            {"sora", "Sora Sompeng"},
            {"xsux", "Sumero-Akkadian Cuneiform"},
            {"sund", "Sundanese"},
            {"sylo", "Syloti Nagri"},
            {"syrc", "Syriac"},
            {"tglg", "Tagalog"},
            {"tagb", "Tagbanwa"},
            {"tale", "Tai Le"},
            {"lana", "Tai Tham (Lanna)"},
            {"tavt", "Tai Viet"},
            {"takr", "Takri"},
            {"taml", "Tamil"},
            {"tml2", "Tamil v.2"},
            {"telu", "Telugu"},
            {"tel2", "Telugu v.2"},
            {"thaa", "Thaana"},
            {"thai", "Thai"},
            {"tibt", "Tibetan"},
            {"tfng", "Tifinagh"},
            {"ugar", "Ugaritic Cuneiform"},
            {"vai", "Vai"},
            {"yi", "Yi"},
        };
        return GetTagDescription(tag, names);
    }
    
    static std::string OTGetLanguageFullName(FXTag tag) {
        static std::map<std::string, std::string> names = {
            {"ABA", "Abaza"},
            {"ABK", "Abkhazian"},
            {"ADY", "Adyghe"},
            {"AFK", "Afrikaans"},
            {"AFR", "Afar"},
            {"AGW", "Agaw"},
            {"ALS", "Alsatian"},
            {"ALT", "Altai"},
            {"AMH", "Amharic"},
            {"APPH", "Phonetic transcription—Americanist conventions"},
            {"ARA", "Arabic"},
            {"ARI", "Aari"},
            {"ARK", "Arakanese"},
            {"ASM", "Assamese"},
            {"ATH", "Athapaskan"},
            {"AVR", "Avar"},
            {"AWA", "Awadhi"},
            {"AYM", "Aymara"},
            {"AZE", "Azeri"},
            {"BAD", "Badaga"},
            {"BAG", "Baghelkhandi"},
            {"BAL", "Balkar"},
            {"BAU", "Baule"},
            {"BBR", "Berber"},
            {"BCH", "Bench"},
            {"BCR", "Bible Cree"},
            {"BEL", "Belarussian"},
            {"BEM", "Bemba"},
            {"BEN", "Bengali"},
            {"BGR", "Bulgarian"},
            {"BHI", "Bhili"},
            {"BHO", "Bhojpuri"},
            {"BIK", "Bikol"},
            {"BIL", "Bilen"},
            {"BKF", "Blackfoot"},
            {"BLI", "Balochi"},
            {"BLN", "Balante"},
            {"BLT", "Balti"},
            {"BMB", "Bambara"},
            {"BML", "Bamileke"},
            {"BOS", "Bosnian"},
            {"BRE", "Breton"},
            {"BRH", "Brahui"},
            {"BRI", "Braj Bhasha"},
            {"BRM", "Burmese"},
            {"BSH", "Bashkir"},
            {"BTI", "Beti"},
            {"CAT", "Catalan"},
            {"CEB", "Cebuano"},
            {"CHE", "Chechen"},
            {"CHG", "Chaha Gurage"},
            {"CHH", "Chattisgarhi"},
            {"CHI", "Chichewa"},
            {"CHK", "Chukchi"},
            {"CHP", "Chipewyan"},
            {"CHR", "Cherokee"},
            {"CHU", "Chuvash"},
            {"CMR", "Comorian"},
            {"COP", "Coptic"},
            {"COS", "Corsican"},
            {"CRE", "Cree"},
            {"CRR", "Carrier"},
            {"CRT", "Crimean Tatar"},
            {"CSL", "Church Slavonic"},
            {"CSY", "Czech"},
            {"DAN", "Danish"},
            {"DAR", "Dargwa"},
            {"DCR", "Woods Cree"},
            {"DEU", "German"},
            {"dlft", "Default"},
            {"DGR", "Dogri"},
            {"DHV (deprecated)", "Dhivehi"},
            {"DIV", "Dhivehi"},
            {"DJR", "Djerma"},
            {"DNG", "Dangme"},
            {"DNK", "Dinka"},
            {"DRI", "Dari"},
            {"DUN", "Dungan"},
            {"DZN", "Dzongkha"},
            {"EBI", "Ebira"},
            {"ECR", "Eastern Cree"},
            {"EDO", "Edo"},
            {"EFI", "Efik"},
            {"ELL", "Greek"},
            {"ENG", "English"},
            {"ERZ", "Erzya"},
            {"ESP", "Spanish"},
            {"ETI", "Estonian"},
            {"EUQ", "Basque"},
            {"EVK", "Evenki"},
            {"EVN", "Even"},
            {"EWE", "Ewe"},
            {"FAN", "French Antillean"},
            {"FAR", "Farsi"},
            {"FIN", "Finnish"},
            {"FJI", "Fijian"},
            {"FLE", "Flemish"},
            {"FNE", "Forest Nenets"},
            {"FON", "Fon"},
            {"FOS", "Faroese"},
            {"FRA", "French"},
            {"FRI", "Frisian"},
            {"FRL", "Friulian"},
            {"FTA", "Futa"},
            {"FUL", "Fulani"},
            {"GAD", "Ga"},
            {"GAE", "Gaelic"},
            {"GAG", "Gagauz"},
            {"GAL", "Galician"},
            {"GAR", "Garshuni"},
            {"GAW", "Garhwali"},
            {"GEZ", "Ge'ez"},
            {"GIL", "Gilyak"},
            {"GMZ", "Gumuz"},
            {"GON", "Gondi"},
            {"GRN", "Greenlandic"},
            {"GRO", "Garo"},
            {"GUA", "Guarani"},
            {"GUJ", "Gujarati"},
            {"HAI", "Haitian"},
            {"HAL", "Halam"},
            {"HAR", "Harauti"},
            {"HAU", "Hausa"},
            {"HAW", "Hawaiin"},
            {"HBN", "Hammer-Banna"},
            {"HIL", "Hiligaynon"},
            {"HIN", "Hindi"},
            {"HMA", "High Mari"},
            {"HND", "Hindko"},
            {"HO", "Ho"},
            {"HRI", "Harari"},
            {"HRV", "Croatian"},
            {"HUN", "Hungarian"},
            {"HYE", "Armenian"},
            {"IBO", "Igbo"},
            {"IJO", "Ijo"},
            {"ILO", "Ilokano"},
            {"IND", "Indonesian"},
            {"ING", "Ingush"},
            {"INU", "Inuktitut"},
            {"IPPH", "Phonetic transcription—IPA conventions"},
            {"IRI", "Irish"},
            {"IRT", "Irish Traditional"},
            {"ISL", "Icelandic"},
            {"ISM", "Inari Sami"},
            {"ITA", "Italian"},
            {"IWR", "Hebrew"},
            {"JAV", "Javanese"},
            {"JII", "Yiddish"},
            {"JAN", "Japanese"},
            {"JUD", "Judezmo"},
            {"JUL", "Jula"},
            {"KAB", "Kabardian"},
            {"KAC", "Kachchi"},
            {"KAL", "Kalenjin"},
            {"KAN", "Kannada"},
            {"KAR", "Karachay"},
            {"KAT", "Georgian"},
            {"KAZ", "Kazakh"},
            {"KEB", "Kebena"},
            {"KGE", "Khutsuri Georgian"},
            {"KHA", "Khakass"},
            {"KHK", "Khanty-Kazim"},
            {"KHM", "Khmer"},
            {"KHS", "Khanty-Shurishkar"},
            {"KHV", "Khanty-Vakhi"},
            {"KHW", "Khowar"},
            {"KIK", "Kikuyu"},
            {"KIR", "Kirghiz"},
            {"KIS", "Kisii"},
            {"KKN", "Kokni"},
            {"KLM", "Kalmyk"},
            {"KMB", "Kamba"},
            {"KMN", "Kumaoni"},
            {"KMO", "Komo"},
            {"KMS", "Komso"},
            {"KNR", "Kanuri"},
            {"KOD", "Kodagu"},
            {"KOH", "Korean Old Hangul"},
            {"KOK", "Konkani"},
            {"KON", "Kikongo"},
            {"KOP", "Komi-Permyak"},
            {"KOR", "Korean"},
            {"KOZ", "Komi-Zyrian"},
            {"KPL", "Kpelle"},
            {"KRI", "Krio"},
            {"KRK", "Karakalpak"},
            {"KRL", "Karelian"},
            {"KRM", "Karaim"},
            {"KRN", "Karen"},
            {"KRT", "Koorete"},
            {"KSH", "Kashmiri"},
            {"KSI", "Khasi"},
            {"KSM", "Kildin Sami"},
            {"KUI", "Kui"},
            {"KUL", "Kulvi"},
            {"KUM", "Kumyk"},
            {"KUR", "Kurdish"},
            {"KUU", "Kurukh"},
            {"KUY", "Kuy"},
            {"KYK", "Koryak"},
            {"LAD", "Ladin"},
            {"LAH", "Lahuli"},
            {"LAK", "Lak"},
            {"LAM", "Lambani"},
            {"LAO", "Lao"},
            {"LAT", "Latin"},
            {"LAZ", "Laz"},
            {"LCR", "L-Cree"},
            {"LDK", "Ladakhi"},
            {"LEZ", "Lezgi"},
            {"LIN", "Lingala"},
            {"LMA", "Low Mari"},
            {"LMB", "Limbu"},
            {"LMW", "Lomwe"},
            {"LSB", "Lower Sorbian"},
            {"LSM", "Lule Sami"},
            {"LTH", "Lithuanian"},
            {"LTZ", "Luxembourgish"},
            {"LUB", "Luba"},
            {"LUG", "Luganda"},
            {"LUH", "Luhya"},
            {"LUO", "Luo"},
            {"LVI", "Latvian"},
            {"MAJ", "Majang"},
            {"MAK", "Makua"},
            {"MAL", "Malayalam Traditional"},
            {"MAN", "Mansi"},
            {"MAP", "Mapudungun"},
            {"MAR", "Marathi"},
            {"MAW", "Marwari"},
            {"MBN", "Mbundu"},
            {"MCH", "Manchu"},
            {"MCR", "Moose Cree"},
            {"MDE", "Mende"},
            {"MEN", "Me'en"},
            {"MIZ", "Mizo"},
            {"MKD", "Macedonian"},
            {"MLE", "Male"},
            {"MLG", "Malagasy"},
            {"MLN", "Malinke"},
            {"MLR", "Malayalam Reformed"},
            {"MLY", "Malay"},
            {"MND", "Mandinka"},
            {"MNG", "Mongolian"},
            {"MNI", "Manipuri"},
            {"MNK", "Maninka"},
            {"MNX", "Manx Gaelic"},
            {"MOH", "Mohawk"},
            {"MOK", "Moksha"},
            {"MOL", "Moldavian"},
            {"MON", "Mon"},
            {"MOR", "Moroccan"},
            {"MRI", "Maori"},
            {"MTH", "Maithili"},
            {"MTS", "Maltese"},
            {"MUN", "Mundari"},
            {"NAG", "Naga-Assamese"},
            {"NAN", "Nanai"},
            {"NAS", "Naskapi"},
            {"NCR", "N-Cree"},
            {"NDB", "Ndebele"},
            {"NDG", "Ndonga"},
            {"NEP", "Nepali"},
            {"NEW", "Newari"},
            {"NGR", "Nagari"},
            {"NHC", "Norway House Cree"},
            {"NIS", "Nisi"},
            {"NIU", "Niuean"},
            {"NKL", "Nkole"},
            {"NKO", "N'Ko"},
            {"NLD", "Dutch"},
            {"NOG", "Nogai"},
            {"NOR", "Norwegian"},
            {"NSM", "Northern Sami"},
            {"NTA", "Northern Tai"},
            {"NTO", "Esperanto"},
            {"NYN", "Nynorsk"},
            {"OCI", "Occitan"},
            {"OCR", "Oji-Cree"},
            {"OJB", "Ojibway"},
            {"ORI", "Odia(formerly Oriya)"},
            {"ORO", "Oromo"},
            {"OSS", "Ossetian"},
            {"PAA", "Palestinian Aramaic"},
            {"PAL", "Pali"},
            {"PAN", "Punjabi"},
            {"PAP", "Palpa"},
            {"PAS", "Pashto"},
            {"PGR", "Polytonic Greek"},
            {"PIL", "Filipino"},
            {"PLG", "Palaung"},
            {"PLK", "Polish"},
            {"PRO", "Provencal"},
            {"PTG", "Portuguese"},
            {"QIN", "Chin"},
            {"RAJ", "Rajasthani"},
            {"RCR", "R-Cree"},
            {"RBU", "Russian Buriat"},
            {"RIA", "Riang"},
            {"RMS", "Rhaeto-Romanic"},
            {"ROM", "Romanian"},
            {"ROY", "Romany"},
            {"RSY", "Rusyn"},
            {"RUA", "Ruanda"},
            {"RUS", "Russian"},
            {"SAD", "Sadri"},
            {"SAN", "Sanskrit"},
            {"SAT", "Santali"},
            {"SAY", "Sayisi"},
            {"SEK", "Sekota"},
            {"SEL", "Selkup"},
            {"SGO", "Sango"},
            {"SHN", "Shan"},
            {"SIB", "Sibe"},
            {"SID", "Sidamo"},
            {"SIG", "Silte Gurage"},
            {"SKS", "Skolt Sami"},
            {"SKY", "Slovak"},
            {"SLA", "Slavey"},
            {"SLV", "Slovenian"},
            {"SML", "Somali"},
            {"SMO", "Samoan"},
            {"SNA", "Sena"},
            {"SND", "Sindhi"},
            {"SNH", "Sinhalese"},
            {"SNK", "Soninke"},
            {"SOG", "Sodo Gurage"},
            {"SOT", "Sotho"},
            {"SQI", "Albanian"},
            {"SRB", "Serbian"},
            {"SRK", "Saraiki"},
            {"SRR", "Serer"},
            {"SSL", "South Slavey"},
            {"SSM", "Southern Sami"},
            {"SUR", "Suri"},
            {"SVA", "Svan"},
            {"SVE", "Swedish"},
            {"SWA", "Swadaya Aramaic"},
            {"SWK", "Swahili"},
            {"SWZ", "Swazi"},
            {"SXT", "Sutu"},
            {"SYR", "Syriac"},
            {"TAB", "Tabasaran"},
            {"TAJ", "Tajiki"},
            {"TAM", "Tamil"},
            {"TAT", "Tatar"},
            {"TCR", "TH-Cree"},
            {"TEL", "Telugu"},
            {"TGN", "Tongan"},
            {"TGR", "Tigre"},
            {"TGY", "Tigrinya"},
            {"THA", "Thai"},
            {"THT", "Tahitian"},
            {"TIB", "Tibetan"},
            {"TKM", "Turkmen"},
            {"TMN", "Temne"},
            {"TNA", "Tswana"},
            {"TNE", "Tundra Nenets"},
            {"TNG", "Tonga"},
            {"TOD", "Todo"},
            {"TRK", "Turkish"},
            {"TSG", "Tsonga"},
            {"TUA", "Turoyo Aramaic"},
            {"TUL", "Tulu"},
            {"TUV", "Tuvin"},
            {"TWI", "Twi"},
            {"UDM", "Udmurt"},
            {"UKR", "Ukrainian"},
            {"URD", "Urdu"},
            {"USB", "Upper Sorbian"},
            {"UYG", "Uyghur"},
            {"UZB", "Uzbek"},
            {"VEN", "Venda"},
            {"VIT", "Vietnamese"},
            {"WA", "Wa"},
            {"WAG", "Wagdi"},
            {"WCR", "West-Cree"},
            {"WEL", "Welsh"},
            {"WLF", "Wolof"},
            {"XBD", "Tai Lue"},
            {"XHS", "Xhosa"},
            {"YAK", "Yakut"},
            {"YBA", "Yoruba"},
            {"YCR", "Y-Cree"},
            {"YIC", "Yi Classic"},
            {"YIM", "Yi Modern"},
            {"ZHH", "Chinese Hong Kong"},
            {"ZHP", "Chinese Phonetic"},
            {"ZHS", "Chinese Simplified"},
            {"ZHT", "Chinese Traditional"},
            {"ZND", "Zande"},
            {"ZUL", "Zulu"},
        };
        
        return GetTagDescription(tag, names);
    }
    
    static std::string OTGetFeatureFullName(FXTag tag) {
        static std::map<std::string, std::string> names = {
            {"aalt", "Access All Alternates"},
            {"abvf", "Above-base Forms"},
            {"abvm", "Above-base Mark Positioning"},
            {"abvs", "Above-base Substitutions"},
            {"afrc", "Alternative Fractions"},
            {"akhn", "Akhands"},
            {"blwf", "Below-base Forms"},
            {"blwm", "Below-base Mark Positioning"},
            {"blws", "Below-base Substitutions"},
            {"calt", "Contextual Alternates"},
            {"case", "Case-Sensitive Forms"},
            {"ccmp", "Glyph Composition / Decomposition"},
            {"cfar", "Conjunct Form After Ro"},
            {"cjct", "Conjunct Forms"},
            {"clig", "Contextual Ligatures"},
            {"cpct", "Centered CJK Punctuation"},
            {"cpsp", "Capital Spacing"},
            {"cswh", "Contextual Swash"},
            {"curs", "Cursive Positioning"},
            {"cv01-cv99", "Character Variants"},
            {"c2pc", "Petite Capitals From Capitals"},
            {"c2sc", "Small Capitals From Capitals"},
            {"dist", "Distances"},
            {"dlig", "Discretionary Ligatures"},
            {"dnom", "Denominators"},
            {"expt", "Expert Forms"},
            {"falt", "Final Glyph on Line Alternates"},
            {"fin2", "Terminal Forms #2"},
            {"fin3", "Terminal Forms #3"},
            {"fina", "Terminal Forms"},
            {"frac", "Fractions"},
            {"fwid", "Full Widths"},
            {"half", "Half Forms"},
            {"haln", "Halant Forms"},
            {"halt", "Alternate Half Widths"},
            {"hist", "Historical Forms"},
            {"hkna", "Horizontal Kana Alternates"},
            {"hlig", "Historical Ligatures"},
            {"hngl", "Hangul"},
            {"hojo", "Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms)"},
            {"hwid", "Half Widths"},
            {"init", "Initial Forms"},
            {"isol", "Isolated Forms"},
            {"ital", "Italics"},
            {"jalt", "Justification Alternates"},
            {"jp78", "JIS78 Forms"},
            {"jp83", "JIS83 Forms"},
            {"jp90", "JIS90 Forms"},
            {"jp04", "JIS2004 Forms"},
            {"kern", "Kerning"},
            {"lfbd", "Left Bounds"},
            {"liga", "Standard Ligatures"},
            {"ljmo", "Leading Jamo Forms"},
            {"lnum", "Lining Figures"},
            {"locl", "Localized Forms"},
            {"ltra", "Left-to-right alternates"},
            {"ltrm", "Left-to-right mirrored forms"},
            {"mark", "Mark Positioning"},
            {"med2", "Medial Forms #2"},
            {"medi", "Medial Forms"},
            {"mgrk", "Mathematical Greek"},
            {"mkmk", "Mark to Mark Positioning"},
            {"mset", "Mark Positioning via Substitution"},
            {"nalt", "Alternate Annotation Forms"},
            {"nlck", "NLC Kanji Forms"},
            {"nukt", "Nukta Forms"},
            {"numr", "Numerators"},
            {"onum", "Oldstyle Figures"},
            {"opbd", "Optical Bounds"},
            {"ordn", "Ordinals"},
            {"ornm", "Ornaments"},
            {"palt", "Proportional Alternate Widths"},
            {"pcap", "Petite Capitals"},
            {"pkna", "Proportional Kana"},
            {"pnum", "Proportional Figures"},
            {"pref", "Pre-Base Forms"},
            {"pres", "Pre-base Substitutions"},
            {"pstf", "Post-base Forms"},
            {"psts", "Post-base Substitutions"},
            {"pwid", "Proportional Widths"},
            {"qwid", "Quarter Widths"},
            {"rand", "Randomize"},
            {"rkrf", "Rakar Forms"},
            {"rlig", "Required Ligatures"},
            {"rphf", "Reph Forms"},
            {"rtbd", "Right Bounds"},
            {"rtla", "Right-to-left alternates"},
            {"rtlm", "Right-to-left mirrored forms"},
            {"ruby", "Ruby Notation Forms"},
            {"salt", "Stylistic Alternates"},
            {"sinf", "Scientific Inferiors"},
            {"size", "Optical size"},
            {"smcp", "Small Capitals"},
            {"smpl", "Simplified Forms"},
            {"ss01", "Stylistic Set 1"},
            {"ss02", "Stylistic Set 2"},
            {"ss03", "Stylistic Set 3"},
            {"ss04", "Stylistic Set 4"},
            {"ss05", "Stylistic Set 5"},
            {"ss06", "Stylistic Set 6"},
            {"ss07", "Stylistic Set 7"},
            {"ss08", "Stylistic Set 8"},
            {"ss09", "Stylistic Set 9"},
            {"ss10", "Stylistic Set 10"},
            {"ss11", "Stylistic Set 11"},
            {"ss12", "Stylistic Set 12"},
            {"ss13", "Stylistic Set 13"},
            {"ss14", "Stylistic Set 14"},
            {"ss15", "Stylistic Set 15"},
            {"ss16", "Stylistic Set 16"},
            {"ss17", "Stylistic Set 17"},
            {"ss18", "Stylistic Set 18"},
            {"ss19", "Stylistic Set 19"},
            {"ss20", "Stylistic Set 20"},
            {"subs", "Subscript"},
            {"sups", "Superscript"},
            {"swsh", "Swash"},
            {"titl", "Titling"},
            {"tjmo", "Trailing Jamo Forms"},
            {"tnam", "Traditional Name Forms"},
            {"tnum", "Tabular Figures"},
            {"trad", "Traditional Forms"},
            {"twid", "Third Widths"},
            {"unic", "Unicase"},
            {"valt", "Alternate Vertical Metrics"},
            {"vatu", "Vattu Variants"},
            {"vert", "Vertical Writing"},
            {"vhal", "Alternate Vertical Half Metrics"},
            {"vjmo", "Vowel Jamo Forms"},
            {"vkna", "Vertical Kana Alternates"},
            {"vkrn", "Vertical Kerning"},
            {"vpal", "Proportional Alternate Vertical Metrics"},
            {"vrt2", "Vertical Alternates and Rotation"},
            {"zero", "Slashed Zero"},
        };
        
        return GetTagDescription(tag, names);
    }
};
